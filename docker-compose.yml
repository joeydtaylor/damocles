services:
  redis:
    image: redis:7-alpine
    container_name: damacles-redis
    command: ["redis-server", "--appendonly", "yes"]
    ports: ["6379:6379"]
    volumes:
      - redis-data:/data
    networks:
      - steeze-edge

  db:
    image: postgres:16-alpine
    container_name: damacles-postgres
    environment:
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: supersecret
      POSTGRES_DB: auth_db
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - steeze-edge

  damocles-migrate:
    build: .
    container_name: damocles-migrate
    working_dir: /app
    env_file: .env.development
    environment:
      DATABASE_URL: postgresql://auth_user:supersecret@db:5432/auth_db?schema=public
      POSTGRES_URL: postgresql://auth_user:supersecret@db:5432/auth_db
    depends_on:
      db:
        condition: service_healthy
    volumes:
      # generate/sign keys here so the app container can read the same files
      - ./etc/keys:/app/etc/keys
    command: >
      sh -c "
        yarn oauth:generate:keys &&
        yarn prisma:init:local &&
        yarn prisma:seed:tenant
      "
    networks:
      - steeze-edge

  damocles:
    build: .
    container_name: damocles
    env_file: .env.development
    environment:
      DATABASE_URL: postgresql://auth_user:supersecret@db:5432/auth_db?schema=public
      REDIS_URL: redis://damacles-redis:6379/0

      # TLS for the server itself
      SSL_SERVER_CERTIFICATE: /app/etc/keys/tls/server.crt
      SSL_SERVER_KEY: /app/etc/keys/tls/server.key

      # If you perform mTLS with clients, expose CA bundle:
      TLS_CLIENT_CA_BUNDLE: /app/etc/keys/tls/ca.crt

      # Optional hardening
      TLS_MIN_VERSION: TLSv1.3

    depends_on:
      damocles-migrate:
        condition: service_completed_successfully
      redis:
        condition: service_started

    ports: ["3000:3000"]
    working_dir: /app
    volumes:
      - .:/app
      - /app/node_modules
      - ./etc/keys:/app/etc/keys
      - ./log:/app/log
    command: sh -c "yarn dev"
    networks:
      - steeze-edge

volumes:
  redis-data:
  pgdata:

networks:
  steeze-edge:
    external: true
