generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Organization {
  id              String   @id @default(uuid())
  domain          String   @unique
  name            String

  // Capability flags
  samlEnabled     Boolean  @default(false)
  oidcEnabled     Boolean  @default(false)

  // SAML
  samlMetadataXml String?  // optional now; only set if samlEnabled

  // OIDC
  oidcConfig      OIDCConfig?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  users         User[]
  roles         Role[]
  oauthClients  OAuthClient[]
  oauthTokens   OAuthToken[]
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  roles          Role[]   // implicit many-to-many
  oauthTokens    OAuthToken[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Role {
  id             String   @id @default(uuid())
  name           String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  users          User[]   // implicit many-to-many

  @@unique([name, organizationId])
}

model OAuthClient {
  id             String   @id @default(uuid())
  name           String
  clientId       String   @unique
  clientSecret   String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  scopes         String[]
  redirectUris   String[] @default([])
  confidential   Boolean  @default(true)
  tokens         OAuthToken[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  authorizationCodes       AuthorizationCode[]
  // OIDC niceties (optional but useful)
  postLogoutRedirectUris   String[] @default([])
  grantTypes               String[] @default(["authorization_code", "client_credentials"])
  responseTypes            String[] @default(["code"])
}

model OAuthToken {
  id               String   @id @default(uuid())
  accessToken      String   @unique
  // refreshToken   String?    // <- legacy/plaintext (we won't use it anymore)
  refreshTokenHash String?  @unique
  refreshPrevTokenHash String?
  refreshFamilyId  String?
  refreshExpiresAt DateTime?
  revokedAt        DateTime?

  scope        String[]
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user         User?        @relation(fields: [userId], references: [id])
  userId       String?

  client       OAuthClient  @relation(fields: [clientId], references: [id])
  clientId     String

  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@index([refreshFamilyId])
  @@index([refreshExpiresAt])
  @@index([revokedAt])
}


model AuthorizationCode {
  id             String   @id @default(uuid())
  redirectUri    String
  codeChallenge  String
  method         String
  expiresAt      DateTime
  scope          String[] @default([])
  userId         String?
  nonce          String?  // OIDC nonce

  client         OAuthClient @relation(fields: [clientId], references: [id])
  clientId       String

  @@index([expiresAt])
}

model OIDCConfig {
  id              String   @id @default(uuid())
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String   @unique
  issuerUrl       String
  clientId        String
  clientSecret    String?
  jwksUrl         String?
  scopes          String[] @default(["openid", "profile", "email"])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
